import os
import dotenv
import openai
import logfire
from typing import Union
from pydantic import BaseModel, Field
from pydantic_ai import Agent
from src.logseq_manager import LogseqManager


class AppendToPage(BaseModel):
    """
    Herramienta para a√±adir un nuevo bloque de contenido al final de una p√°gina de Logseq.
    
    Esta herramienta permite al agente de IA a√±adir contenido como bloques (bullets) 
    al final de p√°ginas existentes o crear p√°ginas nuevas si no existen.
    """
    page_title: str = Field(
        ..., 
        description="El t√≠tulo de la p√°gina a la que se a√±adir√° el contenido. Ej: 'Tareas', 'Ideas/Proyecto Secreto'"
    )
    content: str = Field(
        ..., 
        description="El texto a a√±adir como un nuevo bloque. Ej: 'Comprar leche', 'Investigar sobre pydantic-ai'"
    )


class ReadPageContent(BaseModel):
    """
    Herramienta para leer y recuperar el contenido completo de una p√°gina de Logseq.
    """
    page_title: str = Field(
        ..., 
        description="El t√≠tulo de la p√°gina que se debe leer. Ej: 'Tareas'"
    )


class SearchInPages(BaseModel):
    """
    Herramienta para buscar un t√©rmino en TODAS las p√°ginas de Logseq.
    """
    query: str = Field(
        ..., 
        description="El t√©rmino de b√∫squeda. Ej: 'Inteligencia Artificial', 'receta de cocina'"
    )


class CreateTask(BaseModel):
    """
    Herramienta para crear una nueva tarea (TODO) en una p√°gina de Logseq.
    """
    page_title: str = Field(
        ..., 
        description="El t√≠tulo de la p√°gina donde se crear√° la tarea. Ej: 'Tareas', 'Proyectos/Mi App'"
    )
    content: str = Field(
        ..., 
        description="La descripci√≥n de la tarea a crear. Ej: 'Llamar a mam√°', 'Revisar el informe'"
    )


class MarkTaskAsDone(BaseModel):
    """
    Herramienta para marcar una tarea existente como completada (DONE) en una p√°gina.
    """
    page_title: str = Field(
        ..., 
        description="El t√≠tulo de la p√°gina donde est√° la tarea a marcar como hecha. Ej: 'Tareas'"
    )
    task_content: str = Field(
        ..., 
        description="El contenido exacto de la tarea a marcar como hecha, sin el 'TODO'. Ej: 'Comprar leche'"
    )


def create_logseq_agent(openai_api_key: str) -> Agent:
    """
    Crea un agente de IA espec√≠ficamente dise√±ado para trabajar con Logseq.
    
    Args:
        openai_api_key: Clave de API de OpenAI
        
    Returns:
        Agent: Agente configurado para interpretar comandos y devolver acciones de Logseq
    """
    agent = Agent(
        'openai:gpt-4.1-mini',
        output_type=Union[AppendToPage, ReadPageContent, SearchInPages, CreateTask, MarkTaskAsDone],
        system_prompt=(
            "Eres un asistente de IA especializado en Logseq, un sistema de toma de notas basado en bloques. "
            "Tu tarea es interpretar las solicitudes del usuario y convertirlas en acciones espec√≠ficas de Logseq.\n\n"
            "Tienes cinco herramientas disponibles:\n\n"
            "1. **CreateTask**: √ösala cuando el usuario quiera crear una TAREA, un PENDIENTE o un TODO. Es la opci√≥n preferida para acciones.\n"
            "   - 'A√±ade la tarea de llamar a mam√°' ‚Üí CreateTask(page_title='Tareas', content='Llamar a mam√°')\n"
            "   - 'TODO: Revisar el informe' ‚Üí CreateTask(page_title='Tareas', content='Revisar el informe')\n"
            "   - 'Recordarme comprar leche' ‚Üí CreateTask(page_title='Tareas', content='Comprar leche')\n"
            "   - 'Tengo que estudiar para el examen' ‚Üí CreateTask(page_title='Tareas', content='Estudiar para el examen')\n\n"
            "2. **MarkTaskAsDone**: √ösala cuando el usuario quiera MARCAR COMO HECHA, COMPLETAR o FINALIZAR una tarea existente.\n"
            "   - 'Marca como hecha la tarea de comprar leche' ‚Üí MarkTaskAsDone(page_title='Tareas', task_content='Comprar leche')\n"
            "   - 'Ya he revisado el informe' ‚Üí MarkTaskAsDone(page_title='Tareas', task_content='Revisar el informe')\n"
            "   - 'Complet√© la tarea de llamar al m√©dico' ‚Üí MarkTaskAsDone(page_title='Tareas', task_content='Llamar al m√©dico')\n"
            "   - 'Termin√© de estudiar para el examen' ‚Üí MarkTaskAsDone(page_title='Tareas', task_content='Estudiar para el examen')\n\n"
            "3. **AppendToPage**: √ösala cuando el usuario quiera A√ëADIR, GUARDAR, ANOTAR contenido general (NO tareas).\n"
            "   - 'Apunta que tengo reuni√≥n ma√±ana' ‚Üí AppendToPage(page_title='Agenda', content='Reuni√≥n ma√±ana')\n"
            "   - 'Guarda esta idea: usar IA para organizar notas' ‚Üí AppendToPage(page_title='Ideas', content='Usar IA para organizar notas')\n"
            "   - 'Anota este pensamiento...' ‚Üí AppendToPage(page_title='Notas', content='[pensamiento]')\n\n"
            "4. **ReadPageContent**: √ösala cuando el usuario quiera LEER, VER, MOSTRAR, REVISAR o preguntar QU√â HAY en una p√°gina espec√≠fica.\n"
            "   - '¬øQu√© hay en mis Tareas?' ‚Üí ReadPageContent(page_title='Tareas')\n"
            "   - 'Mu√©strame mis ideas' ‚Üí ReadPageContent(page_title='Ideas')\n"
            "   - 'Lee mi p√°gina de proyectos' ‚Üí ReadPageContent(page_title='Proyectos')\n"
            "   - '¬øQu√© tengo anotado en mi agenda?' ‚Üí ReadPageContent(page_title='Agenda')\n\n"
            "5. **SearchInPages**: √ösala cuando el usuario quiera BUSCAR, ENCONTRAR o preguntar sobre un tema en general a trav√©s de TODO el grafo.\n"
            "   - 'Busca mis notas sobre IA' ‚Üí SearchInPages(query='IA')\n"
            "   - 'Encuentra d√≥nde mencion√© el \"Proyecto Apolo\"' ‚Üí SearchInPages(query='Proyecto Apolo')\n"
            "   - '¬øEn qu√© p√°ginas hablo de cocina?' ‚Üí SearchInPages(query='cocina')\n"
            "   - 'Busca referencias a Python' ‚Üí SearchInPages(query='Python')\n\n"
            "**IMPORTANTE:** Analiza cuidadosamente la intenci√≥n del usuario:\n"
            "- Si quiere crear una TAREA/TODO/PENDIENTE ‚Üí CreateTask\n"
            "- Si quiere MARCAR COMO HECHA/COMPLETAR/FINALIZAR una tarea existente ‚Üí MarkTaskAsDone\n"
            "- Si quiere AGREGAR/ANOTAR contenido general ‚Üí AppendToPage\n"
            "- Si quiere VER/LEER una p√°gina espec√≠fica ‚Üí ReadPageContent\n"
            "- Si quiere BUSCAR/ENCONTRAR en todo el grafo ‚Üí SearchInPages\n\n"
            "Si el usuario no especifica una p√°gina, usa una p√°gina l√≥gica basada en el contexto:\n"
            "- Tareas/TODOs ‚Üí 'Tareas'\n"
            "- Ideas/pensamientos ‚Üí 'Ideas'\n"
            "- Notas generales ‚Üí 'Notas'\n"
            "- Reuniones ‚Üí 'Agenda'\n"
            "- Proyectos ‚Üí 'Proyectos'"
        )
    )
    return agent


def initialize_agent():
    """
    Inicializa el agente de IA configurando las conexiones a Logseq y OpenAI.
    
    Returns:
        tuple: (logseq_manager, openai_client) - Instancias configuradas
        
    Raises:
        ValueError: Si alguna variable de entorno requerida no est√° definida
    """
    # Cargar variables de entorno desde .env
    dotenv.load_dotenv()
    
    # Configurar Logfire para observabilidad
    logfire.configure()
    
    # Obtener variables de entorno requeridas
    graph_path = os.getenv('LOGSEQ_GRAPH_PATH')
    openai_api_key = os.getenv('OPENAI_API_KEY')
    
    # Validar que las variables est√©n definidas
    if not graph_path:
        raise ValueError(
            "‚ùå ERROR: Variable de entorno LOGSEQ_GRAPH_PATH no encontrada.\n"
            "   Por favor, aseg√∫rate de tener un archivo .env con:\n"
            "   LOGSEQ_GRAPH_PATH=/ruta/a/tu/grafo/de/logseq"
        )
    
    if not openai_api_key:
        raise ValueError(
            "‚ùå ERROR: Variable de entorno OPENAI_API_KEY no encontrada.\n"
            "   Por favor, aseg√∫rate de tener un archivo .env con:\n"
            "   OPENAI_API_KEY=tu_clave_de_openai"
        )
    
    # Instanciar el cliente de OpenAI
    openai_client = openai.OpenAI(api_key=openai_api_key)
    
    # Instrumentar PydanticAI con Logfire para observabilidad completa
    logfire.instrument_pydantic_ai()
    
    # Instanciar nuestro gestor de Logseq
    logseq_manager = LogseqManager(graph_path=graph_path)
    
    return logseq_manager, openai_client


def main():
    """
    Punto de entrada principal del agente de IA.
    Crea un bucle interactivo para procesar comandos del usuario.
    """
    print("ü§ñ Inicializando Agente de IA para Logseq...")
    print("=" * 50)
    
    try:
        # Inicializar el agente
        logseq_manager, openai_client = initialize_agent()
        
        # Confirmar inicializaciones exitosas
        print(f"‚úÖ LogseqManager inicializado para el grafo en: {logseq_manager.graph_path}")
        print(f"‚úÖ Cliente de OpenAI inicializado correctamente.")
        
        # Crear el agente de IA
        ai_agent = create_logseq_agent(openai_client.api_key)
        print(f"ü§ñ Agente de IA creado y listo para interpretar comandos.")
        print(f"üöÄ ¬°Configuraci√≥n lista! El agente est√° funcionando.")
        
        # Informaci√≥n adicional sobre el entorno
        print("\n" + "=" * 50)
        print("üìä Informaci√≥n del entorno:")
        print(f"   üìÅ Directorio de p√°ginas: {logseq_manager.pages_path}")
        print(f"   üß† Cliente OpenAI: Configurado y listo")
        print(f"   ü§ñ Agente IA: Especializado en Logseq")
        print("=" * 50)
        
        # Bucle interactivo principal
        print("\nüéØ ¬°Agente listo! Puedes empezar a dar comandos.")
        print("üí° Ejemplos: 'A√±ade comprar leche a mis tareas', 'Guarda esta idea: usar IA'")
        print("üìù Escribe 'salir' para terminar.\n")
        
        while True:
            try:
                # Pedir comando al usuario
                prompt = input("üó£Ô∏è  ¬øQu√© quieres hacer en Logseq? > ").strip()
                
                # Condici√≥n de salida
                if prompt.lower() in ['salir', 'exit', 'quit', '']:
                    print("üëã ¬°Hasta la vista! Agente desconectado.")
                    break
                
                # Usar el agente para interpretar el comando con observabilidad
                print("ü§î Interpretando comando...")
                with logfire.span("procesando_comando: {prompt}", prompt=prompt):
                    result = ai_agent.run_sync(prompt)
                    
                    # Verificar que el resultado sea del tipo esperado
                    if isinstance(result.output, CreateTask):
                        task_action = result.output
                        # Formatear el contenido como una tarea TODO
                        task_content = f"TODO {task_action.content}"
                        logseq_manager.append_to_page(
                            page_title=task_action.page_title,
                            content=task_content
                        )
                        print(f"‚úÖ ¬°Tarea creada! Se a√±adi√≥ '{task_content}' a la p√°gina '{task_action.page_title}'.")
                        
                    elif isinstance(result.output, MarkTaskAsDone):
                        action = result.output
                        print(f"‚úÖ Marcando tarea como hecha en '{action.page_title}'...")
                        
                        # Construir el contenido viejo y nuevo del bloque
                        old_block = f"TODO {action.task_content}"
                        new_block = f"DONE {action.task_content}"
                        
                        # Llamar a nuestro nuevo m√©todo del manager
                        success = logseq_manager.update_block_in_page(
                            action.page_title,
                            old_block,
                            new_block
                        )
                        
                        if success:
                            print(f"üéâ ¬°Tarea completada! Se actualiz√≥ '{action.task_content}' en '{action.page_title}'.")
                        else:
                            print(f"‚ùå No pude encontrar la tarea 'TODO {action.task_content}' en la p√°gina '{action.page_title}'.")
                        
                    elif isinstance(result.output, AppendToPage):
                        append_action = result.output
                        
                        # Ejecutar la acci√≥n usando nuestro LogseqManager
                        logseq_manager.append_to_page(
                            page_title=append_action.page_title, 
                            content=append_action.content
                        )
                        
                        # Confirmar √©xito
                        print(f"‚úÖ ¬°Hecho! Se a√±adi√≥ '{append_action.content}' a la p√°gina '{append_action.page_title}'.")
                        
                    elif isinstance(result.output, ReadPageContent):
                        read_action = result.output
                        print(f"üîé Leyendo el contenido de la p√°gina '{read_action.page_title}'...")
                        content = logseq_manager.read_page_content(read_action.page_title)
                        if content:
                            print("\n--- Contenido de la P√°gina ---")
                            print(content)
                            print("---------------------------\n")
                        else:
                            print(f"‚ùå La p√°gina '{read_action.page_title}' no existe o est√° vac√≠a.")
                            
                    elif isinstance(result.output, SearchInPages):
                        search_action = result.output
                        print(f"üîé Buscando '{search_action.query}' en todas las p√°ginas...")
                        results = logseq_manager.search_in_pages(search_action.query)
                        if results:
                            print(f"‚úÖ Encontr√© menciones en las siguientes {len(results)} p√°ginas:")
                            for page_title in results:
                                print(f"  - {page_title}")
                        else:
                            print(f"‚ùå No encontr√© ninguna p√°gina que mencione '{search_action.query}'.")
                            
                    else:
                        print("‚ùå Lo siento, no pude entender ese comando. ¬øPodr√≠as reformularlo?")
                        print("üí° Intenta con algo como: 'Crear tarea: [descripci√≥n]', 'A√±ade [nota] a [p√°gina]', '¬øQu√© hay en [p√°gina]?' o 'Busca [t√©rmino]'")
                
                print()  # L√≠nea en blanco para separar comandos
                
            except KeyboardInterrupt:
                print("\nüëã ¬°Hasta la vista! Agente desconectado.")
                break
            except Exception as e:
                print(f"‚ùå Error al procesar el comando: {e}")
                print("üîÑ Intenta con otro comando o escribe 'salir' para terminar.\n")
        
    except ValueError as e:
        print(f"{e}")
        return 1
    except Exception as e:
        print(f"‚ùå ERROR inesperado durante la inicializaci√≥n: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    exit(exit_code) 